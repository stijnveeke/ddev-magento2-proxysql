# Details about the install.yaml file are at https://ddev.readthedocs.io/en/stable/users/extend/additional-services/#sections-and-features-of-ddev-get-add-on-installyaml

name: proxysql

# pre_install_actions - list of actions to run before installing the addon.
# Examples would be removing an extraneous docker volume,
# or doing a sanity check for requirements.
# DDEV environment variables can be interpolated into these actions
# pre_install_actions are executed in the context of the target project's root directory.
pre_install_actions:
    - |
        cat <<EOF >${DDEV_APPROOT}/.ddev/proxy-sql.config.cnf
        #ddev-generated
        datadir="/var/lib/proxysql"
        admin_variables=
        {
            admin_credentials="admin:admin;cluster:cluster"
            mysql_ifaces="0.0.0.0:6032"
        }
        mysql_variables=
        {
            threads=4
            max_connections=2048
            default_query_delay=0
            default_query_timeout=36000000
            have_compress=true
            poll_timeout=2000
            interfaces="0.0.0.0:6032"
            default_schema="information_schema"
            stacksize=1048576
            server_version="5.5.30"
            connect_timeout_server=3000
            monitor_username="monitor"
            monitor_password="monitor"
            monitor_history=600000
            monitor_connect_interval=60000
            monitor_ping_interval=10000
            monitor_read_only_interval=1500
            monitor_read_only_timeout=500
            ping_interval_server_msec=120000
            ping_timeout_server=500
            commands_stats=true
            sessions_sort=true
            connect_retries_on_failure=10
            default_authentication_plugin="mysql_native_password"
        }
        mysql_servers =
        (
            { address="db:3306"; hostgroup=10; max_connections=100; max_replication_lag=5; use_ssl=false; },
            { address="replica_1:3306"; hostgroup=20; max_connections=100; max_replication_lag=5; use_ssl=false; }
            { address="replica_1:3306"; hostgroup=20; max_connections=100; max_replication_lag=5; use_ssl=false; }
            { address="replica_canary:3306"; hostgroup=30; max_connections=100; max_replication_lag=5; use_ssl=false; }

        )
        mysql_users =
        (
            { username="db"; password="db"; default_hostgroup=10; active=true; },
            { username="canary"; password="canary"; default_hostgroup=30; active=true; },
        )
        mysql_query_rules =
        (

        )
      
        EOF
  # - |
  #   #ddev-description:Check architecture type for incompatible arm64 type
  #   if [ "$(uname -m)" = "arm64" -o "$(uname -m)" = "aarch64" ]; then
  #     echo "This package does not work on arm64 (Apple Silicon) machines";
  #     exit 1;
  #   fi

  # - "docker volume rm ddev-${DDEV_PROJECT}_solr 2>/dev/null || true"

  # You can also check for client DDEV version with ddev_version_constraint (see below).
  # - |
  #   #ddev-description:Checking DDEV version
  #   if ! ( ddev debug capabilities 2>/dev/null | grep corepack >/dev/null 2>&1 ) ; then
  #     echo "This add-on requires DDEV v1.23+ or higher, please upgrade." && exit 2
  #   fi

  # - 'echo "what is your platform.sh token" && read x'

  # This item shows templating using DDEV environment variables.
  # - |
  #   #ddev-description:Touch a file to create it
  #   touch ${DDEV_APPROOT}/.ddev/somefile.${DDEV_PROJECT_TYPE}.${DDEV_DOCROOT}.txt

  # This item shows complex go templating possibilities based on yaml_read_files
  # - |
  #   #ddev-description:Create a config.platformsh.yaml
  #   cat <<EOF >${DDEV_APPROOT}/.ddev/config.platformsh.yaml
  #   php_version: {{ trimPrefix "php:" .platformapp.type }}
  #   database:
  #     type: {{ regexReplaceAll ":.*$" .services.db.type "" }}
  #     version: {{ regexReplaceAll "^.*:" .services.db.type "" }}

  #   docroot: {{ dig "web" "locations" "/" "root" "notfound" .platformapp }}
  #   {{- if eq .platformapp.build.flavor "composer" }}
  #   hooks:
  #     post-start:
  #       - composer: install
  #   {{- if .platformapp.hooks.deploy }}
  #       - exec: "{{ trimAll "\n" .platformapp.hooks.deploy | splitList "\n" | join ` && ` }}"
  #   {{- end }}
  #   {{- end }}

  #   EOF

# list of files and directories listed that are copied into project .ddev directory
# Each file should contain #ddev-generated so it can be replaced by a later `ddev add-on get`
# if it hasn't been modified by the user.
# DDEV environment variables can be interpolated into these filenames
# If you use directories, they must be directories that are managed
# by this add-on, or removal could remove things that are not owned by it
project_files:
  - docker-compose.proxysql.yaml
  # - commands/web/add-on-command
  # - commands/host/add-on-command-host
  # - web-build/Dockerfile.proxysql
  # - some-directory/file1.txt
  # - some-directory/file2.txt
  # - extra_files_dir_created_by_this_template/
  # - somefile.sh

# List of files and directories that are copied into the global .ddev directory
# DDEV environment variables can be interpolated into these filenames
# Note that if these files are used by a team, you will need to automate their installation
# by adding `ddev add-on get` to your workflow to ensure that everyone has them.
# Otherwise, use 'project_files' to commit them to the repository.
global_files:
  # - commands/web/add-on-command
  # - homeadditions/some-file.txt

# Version constraint for DDEV that will be validated against the running dockerutable
# and prevent add-on from being installed if it doesn't validate.
# See https://github.com/Masterminds/semver#checking-version-constraints for constraint rules.
# Available with DDEV v1.23.4+, and works only for DDEV v1.23.4+ binaries
# example: ddev_version_constraint: '>= v1.23.4'
ddev_version_constraint: ''

# List of add-on names that this add-on depends on
dependencies:
  - https://github.com/stijnveeke/ddev-magento-db-replication/tarball/main
  # - redis


# DDEV environment variables can be interpolated into these actions.
# post_install_actions are executed in the context of the target project's .ddev directory.
post_install_actions:
  - docker exec -it ddev-${DDEV_SITENAME}-db mysql -uroot -proot -e "CREATE USER 'canary'@'%' IDENTIFIED BY 'canary';"
  - docker exec -it ddev-${DDEV_SITENAME}-db mysql -uroot -proot -e "GRANT ALL PRIVILEGES ON db.* TO 'canary'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-db mysql -uroot -proot -e "CREATE USER 'monitor'@'%' IDENTIFIED BY 'monitor';"
  - docker exec -it ddev-${DDEV_SITENAME}-db mysql -uroot -proot -e "GRANT SELECT ON sys.* TO 'monitor'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-db mysql -uroot -proot -e "FLUSH PRIVILEGES;"

  - docker exec -it ddev-${DDEV_SITENAME}-replica_1 mysql -uroot -proot -e "CREATE USER 'monitor'@'%' IDENTIFIED BY 'monitor';"
  - docker exec-it ddev-${DDEV_SITENAME}-replica_1 mysql -uroot -proot -e "GRANT SELECT ON sys.* TO 'monitor'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_1 mysql -uroot -proot -e "REVOKE INSERT, UPDATE, DELETE ON db.* FROM 'db'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_1 mysql -uroot -proot -e "FLUSH PRIVILEGES;"

  
  - docker exec -it ddev-${DDEV_SITENAME}-replica_2 mysql -uroot -proot -e "CREATE USER 'monitor'@'%' IDENTIFIED BY 'monitor';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_2 mysql -uroot -proot -e "GRANT SELECT ON sys.* TO 'monitor'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_2 mysql -uroot -proot -e "REVOKE INSERT, UPDATE, DELETE ON db.* FROM 'db'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_2 mysql -uroot -proot -e "FLUSH PRIVILEGES;"

  - docker exec -it ddev-${DDEV_SITENAME}-replica_canary mysql -uroot -proot -e "CREATE USER 'canary'@'%' IDENTIFIED BY 'canary';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_canary mysql -uroot -proot -e "GRANT ALL PRIVILEGES ON db.* TO 'canary'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_canary mysql -uroot -proot -e "CREATE USER 'monitor'@'%' IDENTIFIED BY 'monitor';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_canary mysql -uroot -proot -e "GRANT SELECT ON sys.* TO 'monitor'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_canary mysql -uroot -proot -e "FLUSH PRIVILEGES;"
# Needs to updated to include tables for canary that are not replicated during setup:upgrade...

# Shell actions that can be done during removal of the add-on.
# Files listed in project_files section will be automatically removed here if they contain #ddev-generated line.
# removal_actions are executed in the context of the target project's .ddev directory.
removal_actions:
  - docker exec -it ddev-${DDEV_SITENAME}-db mysql -uroot -proot -e "DROP USER 'canary'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-db mysql -uroot -proot -e "DROP USER 'monitor'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_1 mysql -uroot -proot -e "DROP USER 'monitor'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_2 mysql -uroot -proot -e "DROP USER 'monitor'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_canary mysql -uroot -proot -e "DROP USER 'canary'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_canary mysql -uroot -proot -e "DROP USER 'monitor'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_1 mysql -uroot -proot -e "GRANT ALL PRIVILEGES ON db.* TO 'db'@'%';"
  - docker exec -it ddev-${DDEV_SITENAME}-replica_2 mysql -uroot -proot -e "GRANT ALL PRIVILEGES ON db.* TO 'db'@'%';"


  # - rm ~/.ddev/commands/web/somecommand
  # - |
  #   if [ -f ${DDEV_APPROOT}/.ddev/docker-compose.proxysql_extras.yaml ]; then
  #     if grep -q '#ddev-generated' ${DDEV_APPROOT}/.ddev/docker-compose.proxysql_extras.yaml; then
  #       rm -f ${DDEV_APPROOT}/.ddev/docker-compose.proxysql_extras.yaml
  #     else
  #       echo "Unwilling to remove '${DDEV_APPROOT}/.ddev/docker-compose.proxysql_extras.yaml' because it does not have #ddev-generated in it; you can manually delete it if it is safe to delete."
  #     fi
  #   fi

# Advanced usage - YAML files can be read in and then used as go template actions
# in pre_install_actions and post_install_actions
# See example in
# https://github.com/ddev/ddev/blob/master/cmd/ddev/cmd/testdata/TestCmdAddonComplex/recipe/install.yaml
yaml_read_files:
  # someyaml: someyaml.yaml
  # otheryaml: someotheryaml.yaml
